#!/usr/bin/perl -w

# swamp-scarf-sarif
#
#     Source code: https://github.com/mirswamp/swamp-scarf-sarif
#     Project information: https://continuousassurance.org
#
# Copyright 2018 Yuan Zhe Bugh, James A. Kupsch
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Lincense is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use FindBin;
use lib "$FindBin::Bin";
use Memory::Usage;
use XML::Twig;
use Data::Dumper;
use Getopt::Long;
use Cwd;
use ScarfXmlReader;
use SarifJsonWriter qw(CheckInitialData CheckResultData);

my $progName = "swamp-scarf-sarif";
my $version = '0.8.5';

my $bashNonMetaChars = qr/[a-zA-Z0-9.,_=+\/\@:-]/;

# PrintUsage: Prints a usage message
sub PrintUsage {
    my $programName = $0;
    $programName =~ s/.*[\\\/]//;

    print STDERR <<EOF;
Usage: $programName [options]

options:
    --help                      -h print this message
    --version                   -v print version
    --compact                   -c print compactly (no indents)
    --scarf=<FILE>              -x path to scarf file
    --summary=<FILE>            -s path to assessment_summary file
    --hashes=<FILE>             -l path to file containing list of hashes
    --build=<DIR>               -b path to build directory
    --error=<STRING>            -e reasons assessment failed
    --external=<STRING>         -t objects to be externalized
    --output=<FILE>             -o output file name/path
    --setenv                    -n reduce conversion env output
EOF
}

# PrintVersion - Print the version of the program
sub PrintVersion {
    my $progName = $0;

    $progName =~ s/.*(\\\/)//;
    print "$progName version $version\n";
}

sub ProcessOptions {
    my %optionDefaults = (
        help => 0,
        compact => 1,
    );

    my @options = (
        "help|h!",
        "version|v!",
        "compact|c!",
        "scarf|x=s",
        "summary|s=s",
        "hashes|l=s",
        "build|b=s",
        "error|e=s",
        "external|t=s%",
        "output|o=s",
        "setenv|n!",
    );

    Getopt::Long::Configure(qw/require_order no_ignore_case no_auto_abbrev/);
    my %getoptOptions;
    my $ok = GetOptions(\%getoptOptions, @options);

    my %options = %optionDefaults;
    while (my ($k, $v) = each %getoptOptions) {
        if ($k eq "compact") {
            $options{$k} = 0;
        } else {
            $options{$k} = $v;
        }
    }

    my @errs;

    if (!$ok || $options{help}) {
        PrintUsage(\%optionDefaults);
        exit !$ok;
    }

    if ($ok && $options{version}) {
        PrintVersion();
        exit 0;
    }

    if (!exists $options{scarf} && !exists $options{error}) {
        push @errs, "Must provide either scarf file or error file";
    }

    my %externalizable = (
        conversion => 0,
        files => 0,
        graphs => 0,
        invocations => 0,
        logicalLocations => 0,
        properties => 0,
        resources => 0,
        results => 0,
    );
    foreach my $key (keys %{$options{external}}) {
        if (!exists $externalizable{$key}) {
            push @errs, "external property $key not recognized";
        }
    }

    push @errs, "output file name/path not provided" unless exists $options{output};

    if (@errs) {
        print STDERR "$0: options Errors:\n    ", join ("\n    ", @errs), "\n";
        exit 1;
    }

    return \%options;
}

sub ReadAssessmentSummary {
    my ($summaryFile) = @_;
    my %hash = (
        packageRootDir => undef,
        assessments    => [],
    );
    my $assessment = {};

    my $t = XML::Twig->new(
        twig_handlers => {
            'assessment-summary/package-root-dir' => sub {
                my ($twig, $e) = @_;
                $hash{packageRootDir} = GetText($e);
            },
            'assessment-summary/assessment-artifacts/assessment' => sub {
                my ($twig, $e) = @_;
                $assessment->{commandLine} = BashQuoteArgList($assessment->{args});
                push @{$hash{assessments}}, $assessment;
                $assessment = {};
                $twig->purge();
            },
            'assessment-summary/assessment-artifacts/assessment/build-artifact-id' => sub {
                my ($twig, $e) = @_;
                $assessment->{"build-artifact-id"} = GetText($e);
            },
            'assessment-summary/assessment-artifacts/assessment/report' => sub {
                my ($twig, $e) = @_;
                $assessment->{report} = GetText($e);
            },
            'assessment-summary/assessment-artifacts/assessment/exit-code' => sub {
                my ($twig, $e) = @_;
                $assessment->{exitCode} = GetText($e);
            },
            'assessment-summary/assessment-artifacts/assessment/start-ts' => sub {
                my ($twig, $e) = @_;
                $assessment->{startTime} = ConvertEpoch(GetText($e));
            },
            # FIXME: There is no need for the following block since it should be stop-ts
            'assessment-summary/assessment-artifacts/assessment/end-ts' => sub {
                my ($twig, $e) = @_;
                $assessment->{endTime} = ConvertEpoch(GetText($e));
            },
            'assessment-summary/assessment-artifacts/assessment/stop-ts' => sub {
                my ($twig, $e) = @_;
                $assessment->{endTime} = ConvertEpoch(GetText($e));
            },
            'assessment-summary/assessment-artifacts/assessment/command/cwd' => sub {
                my ($twig, $e) = @_;
                $assessment->{workingDirectory} = GetText($e);
            },
            'assessment-summary/assessment-artifacts/assessment/command/environment/env' => sub {
                my ($twig, $e) = @_;
                my $string = GetText($e);
                if ($string =~ /(.+)=(.*)/) {
                    if (exists $assessment->{env}{$1}) {
                        die "env $1 already exists";
                    }
                    $assessment->{env}{$1} = $2;
                }
                else {
                    print "Error parsing env $string\n";
                }
            },
            'assessment-summary/assessment-artifacts/assessment/command/args/arg' => sub {
                my ($twig, $e) = @_;
                push @{$assessment->{args}}, GetText($e);
            },
        }
    );
    $t->parsefile($summaryFile);
    return \%hash;
}

sub ReadHashFile {
    my ($filename) = @_;
    my %hash;

    open (my $fh, '<', $filename) or die "Can't open hash file $filename: $!";

    foreach (<$fh>) {
        if (/(.+)\s\s(.+)/) {
            $hash{$2} = $1;
        } else {
            die "Error parsing hash file";
        }
    }

    close $fh;
    return \%hash;
}

sub InitialFunction {
    my ($initialData, $data) = @_;

    # create uriBaseId for assessment_report files
    my $dir = $initialData->{build_root_dir};
    if ($dir =~ /(.+)\/.+/) {
        $dir = $1."/results";
    } else {
        die "build_root_dir is not as expected";
    }
    $initialData->{results_root_dir} = $dir;   
    
    if ($data->{options}{build}) {
        $initialData->{buildDir} = $data->{options}{build};
    }

    $data->{writer}->BeginFile();
    $data->{writer}->BeginRun($initialData);

    my %baseIds = (
        PACKAGEROOT => "file://".AdjustPath(".", $initialData->{build_root_dir}, $initialData->{package_root_dir}),
        RESULTSROOT => "file://".$initialData->{results_root_dir},
    );
    $data->{writer}->AddOriginalUriBaseIds(\%baseIds);

    if ($data->{options}{summary}) {
        my $invocations = ReadAssessmentSummary($data->{options}{summary});

        # Check if packageRootDir in assessment_summary is same as root_dir in scarf file
        my $rootDir = AdjustPath(".", $initialData->{build_root_dir}, $initialData->{package_root_dir});
        if ($invocations->{packageRootDir} ne $rootDir) {
            die "Expect package_root_dir $invocations->{packageRootDir} in assessment_summary to be the same as the root_dir $rootDir in the scarf file: $!";
        }

        $data->{writer}->AddInvocations($invocations->{assessments})
    }
    
    $data->{writer}->BeginResults();

    return;
}

sub BugFunction {
    my ($bugData, $data) = @_;

    $data->{writer}->AddResult($bugData);

    return;
}

sub Failure {
    my ($data) = @_;
    my $failureData = {};

    if ($data->{options}{output} =~ /.+---.+---(.+)---parse/) {
        $failureData->{tool}{tool_name} = $1;
    }
    else {
        die "Unable to get tool name from dir name";
    }

    $failureData->{conversion}{tool_name} = $progName;
    $failureData->{conversion}{tool_version} = $version;
    $failureData->{conversion}{commandLine} = $0;
    $failureData->{conversion}{argv} = $data->{argv};
    $failureData->{conversion}{workingDirectory} = getcwd();
    if ($data->{options}{setenv}) {
        foreach(keys %ENV) {
            if ($_ eq "LANG") {
                $failureData->{conversion}{env}{$_} = $ENV{$_};
            } elsif ($_ eq "PATH") {
                $failureData->{conversion}{env}{$_} = "/bin:/usr/bin:."
            }
        }
    } else {
        foreach (keys %ENV) {
            $failureData->{conversion}{env}{$_} = $ENV{$_};
        }
    }
    $failureData->{conversion}{startTime} = $data->{startTime};

    $failureData->{message} = $data->{options}{error};

    my $writer = new SarifJsonWriter($data->{options}{output}, "utf-8");
    $writer->SetPretty($data->{options}{compact});

    $writer->AddFailure($failureData);
}

sub main {
    my $startTime = time();
    my $mu = Memory::Usage->new();
    $mu->record('start');

    my %data;

    $data{startTime} = $startTime;
    push @{$data{argv}}, @ARGV;
    $data{options} = ProcessOptions();

    my %externalOptions;
    foreach my $exName (keys %{$data{options}{external}}) {
        $externalOptions{$exName}{name} = $data{options}{external}{$exName};
    }

    if ($data{options}{error}) {
        Failure(\%data);
    }
    else {
        my $reader = new ScarfXmlReader($data{options}{scarf});

        my %writerOptions = (
            external => \%externalOptions,
            pretty   => $data{options}{compact},
        );
        $data{writer} = new SarifJsonWriter($data{options}{output}, "utf-8");
        $data{writer}->SetOptions(\%writerOptions);

        $reader->SetInitialCallback(\&InitialFunction);
        $reader->SetBugCallback(\&BugFunction);

        $reader->SetCallbackData(\%data);
        $reader->Parse();

        $data{writer}->EndResults();

        my %endData;

        if ($data{options}{hashes}) {
            $endData{sha256hashes} = ReadHashFile($data{options}{hashes});
        }

        $endData{conversion}{tool_name} = $progName;
        $endData{conversion}{tool_version} = $version;
        $endData{conversion}{commandLine} = $0;
        $endData{conversion}{argv} = $data{argv};
        $endData{conversion}{workingDirectory} = getcwd();
        if ($data{options}{setenv}) {
            foreach(keys %ENV) {
                if ($_ eq "LANG") {
                    $endData{conversion}{env}{$_} = $ENV{$_};
                } elsif ($_ eq "PATH") {
                    $endData{conversion}{env}{$_} = "/bin:/usr/bin:."
                }
            }
        } else {
            foreach (keys %ENV) {
                $endData{conversion}{env}{$_} = $ENV{$_};
            }
        }
        $endData{conversion}{startTime} = $data{startTime};

        $data{writer}->EndRun(\%endData);
        $data{writer}->EndFile();
    }

    $mu->record('end');
    #$mu->dump();
}

sub GetText {
    my ($e) = @_;

    if (!$e->contains_only_text()) {
        my $xpath = $e->xpath();
        die "Element $xpath must contain only text: $!";
    }

    return $e->text();
}

sub ConvertEpoch {
    my ($time) = @_;

    my $fraction;
    if ($time =~ /.+\.(.+)/) {
        $fraction = $1;
    }

    my ($sec, $min, $hour, $day, $month, $year) = gmtime($time);

    $year += 1900;
    $month += 1;

    if ($month < 10) {
        $month = "0".$month;
    }
    if ($day < 10) {
        $day = "0".$day;
    }
    if ($hour < 10) {
        $hour = "0".$hour;
    }
    if ($min < 10) {
        $min = "0".$min;
    }
    if ($sec < 10) {
        $sec = "0".$sec;
    }

    if ($fraction) {
        return "$year-$month-$day"."T"."$hour:$min:$sec.$fraction" . "Z";
    } else {
        return "$year-$month-$day"."T"."$hour:$min:$sec" . "Z";
    }
}

# NormalizePath - take a path and remove empty and '.' directory components
#                 empty directories become '.'
sub NormalizePath {
    my $p = shift;

    $p =~ s/\/\/+/\//g;        # collapse consecutive /'s to one /
    $p =~ s/\/(\.\/)+/\//g;    # change /./'s to one /
    $p =~ s/^\.\///;           # remove initial ./
    $p = '.' if $p eq '';      # change empty dirs to .
    $p =~ s/\/\.$/\//;                 # remove trailing . directory names
    $p =~ s/\/$// unless $p eq '/'; # remove trailing /

    return $p;
}

# AdjustPath - take a path that is relative to curDir and make it relative
#              to baseDir.  If the path is not in baseDir, do not modify.
#
#       baseDir    - the directory to make paths relative to
#       curDir     - the directory paths are currently relative to
#       path       - the path to change
sub AdjustPath {
    my ($baseDir, $curDir, $path) = @_;

    $baseDir = NormalizePath($baseDir);
    $curDir = NormalizePath($curDir);
    $path = NormalizePath($path);

    # if path is relative, prefix with current dir
    if ($path eq '.') {
        $path = $curDir;
    } elsif ($curDir ne '.' && $path !~ /^\//) {
        $path = "$curDir/$path";
    }

    # remove initial baseDir from path if baseDir is not empty
    $path =~ s/^\Q$baseDir\E\///;

    return $path;
}

sub HasBashMetaChars {
    my $s = shift;
    return ($s !~ /^$bashNonMetaChars*$/);
}

sub BashQuote {
    my $s = shift;

    my @a = split /(')/, $s;
    foreach (@a) {
        if (HasBashMetaChars($_)) {
            if ($_ eq "'") {
                $_ = "\\'";
            } else {
                $_ = "'$_'";
            }
        }
    }
    return join('', @a);
}

sub BashQuoteArgList {
    my ($c) = @_;
    my @cmd = @{$c};
    my $s = join ' ', map {BashQuote $_} @cmd;
    return $s;
}

main();
